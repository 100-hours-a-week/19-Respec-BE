name: Backend CI/CD

on:
  push:
    branches: [dev, stage, main]

env:
  AWS_REGION: ap-northeast-2
  CODEDEPLOY_APP: respec-be-codedeploy
  DEPLOY_GROUP: respec-be-deploy-group
  S3_BUCKET: specranking-deploy-bucket

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment variables
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          BRANCH_NAME=${GITHUB_REF##*/}

          if [[ "$BRANCH_NAME" == "dev" ]]; then
            echo "ENV=dev" >> $GITHUB_ENV
            echo "ECR_REPO=specranking-backend-dev" >> $GITHUB_ENV
            echo "TAG=dev-${SHORT_SHA}" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "stage" ]]; then
            echo "ENV=stage" >> $GITHUB_ENV
            echo "ECR_REPO=specranking-backend-stage" >> $GITHUB_ENV
            echo "TAG=stage-${SHORT_SHA}" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "ECR_REPO=specranking-backend-prod" >> $GITHUB_ENV
            echo "TAG=prod-${SHORT_SHA}" >> $GITHUB_ENV
          else
            echo "‚ùå Unknown branch"
            exit 1
          fi

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build JAR with Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        run: |
          IMAGE_URI=$(aws ecr describe-repositories \
            --repository-names $ECR_REPO \
            --query 'repositories[0].repositoryUri' \
            --output text --region $AWS_REGION)

          docker build -t $IMAGE_URI:$TAG .
          docker push $IMAGE_URI:$TAG

      - name: Package deploy bundle (start/stop script + appspec.yml)
        run: |
          mkdir -p artifacts
          zip -r artifacts/backend-deploy.zip appspec.yml start.sh stop.sh

      - name: Upload to S3
        run: |
          aws s3 cp artifacts/backend-deploy.zip s3://$S3_BUCKET/$ENV/backend-deploy-$TAG.zip

      - name: Manual approval for stage/prod
        if: env.ENV != 'dev'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: donghyeon
          minimum-approvals: 1
          issue-title: "Approve backend deploy to ${{ env.ENV }}"
          issue-body: "ECR Tag: ${{ env.TAG }}"

      - name: Trigger CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $DEPLOY_GROUP \
            --s3-location bucket=$S3_BUCKET,key=$ENV/backend-deploy-$TAG.zip,bundleType=zip \
            --region $AWS_REGION
