name: Deploy Backend to EC2

on:
  push:
    branches:
      - stage

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SPRING_JWT_SECRET: ${{ secrets.JWT_SECRET }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
      BACKEND_BASE_URL: ${{ secrets.BACKEND_BASE_URL }}
      FRONTEND_BASE_URL: ${{ secrets.FRONTEND_BASE_URL }}
      AI_SERVER_URL: ${{ secrets.AI_SERVER_URL }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: SPRING_DATASOURCE_URL,SPRING_DATASOURCE_USERNAME,SPRING_DATASOURCE_PASSWORD,SPRING_JWT_SECRET,KAKAO_CLIENT_ID,KAKAO_CLIENT_SECRET,BACKEND_BASE_URL,FRONTEND_BASE_URL,AI_SERVER_URL,AWS_S3_BUCKET,AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
          script: |
            REPO_DIR=19-Respec-BE
            LOG_FILE=~/backend.log

            if [ ! -d "$REPO_DIR" ]; then
              git clone https://github.com/100-hours-a-week/19-Respec-BE.git
            fi

            cd $REPO_DIR
            git checkout stage
            git pull origin stage

            echo "üì¶ application.properties ÏÉùÏÑ± Ï§ë..."
            cat <<EOF > src/main/resources/application.properties
            spring.datasource.url=$SPRING_DATASOURCE_URL
            spring.datasource.username=$SPRING_DATASOURCE_USERNAME
            spring.datasource.password=$SPRING_DATASOURCE_PASSWORD
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

            spring.jpa.hibernate.ddl-auto=none
            spring.jpa.show-sql=false
            spring.jpa.properties.hibernate.format_sql=false
            server.port=8080
            spring.profiles.active=auth, ai, no-spec-initialize, no-user-initialize, s3

            spring.jwt.secret=$SPRING_JWT_SECRET

            spring.security.oauth2.client.registration.kakao.client-name=kakao
            spring.security.oauth2.client.registration.kakao.client-id=$KAKAO_CLIENT_ID
            spring.security.oauth2.client.registration.kakao.client-secret=$KAKAO_CLIENT_SECRET
            spring.security.oauth2.client.registration.kakao.redirect-uri=${backend.base-url}/login/oauth2/code/kakao
            spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
            spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post

            spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
            spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
            spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
            spring.security.oauth2.client.provider.kakao.user-name-attribute=id

            spring.cloud.aws.s3.enabled=true
            spring.cloud.aws.stack.auto=false
            cloud.aws.s3.bucket=$AWS_S3_BUCKET
            cloud.aws.region.static=$AWS_REGION
            cloud.aws.credentials.access-key=$AWS_ACCESS_KEY_ID
            cloud.aws.credentials.secret-key=$AWS_SECRET_ACCESS_KEY

            logging.level.org.springframework.security.oauth2.client=DEBUG
            logging.level.org.springframework.web.client.RestTemplate=DEBUG
            mock.login.user=false

            backend.base-url=$BACKEND_BASE_URL
            frontend.base-url=$FRONTEND_BASE_URL
            frontend.redirect-url=${frontend.base-url}/oauth-redirect
            spring.graphql.cors.allowed-origins=${frontend.base-url}

            ai.server.url=$AI_SERVER_URL
            ai.server.url.path=/spec/v1/post
            EOF

            echo "‚òï JAVA_HOME ÏÑ§Ï†ï Ï§ë..."
            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
            export PATH=$JAVA_HOME/bin:$PATH

            echo "üöÄ Spring Boot ÎπåÎìú ÏãúÏûë..."
            ./gradlew clean build -x test || { echo "‚ùå ÎπåÎìú Ïã§Ìå®"; exit 1; }

            JAR_FILE=$(find build/libs -name "*.jar" | head -n 1)
            if [ -z "$JAR_FILE" ]; then
              echo "‚ùå JAR ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."
              exit 1
            fi

            echo "üõë Í∏∞Ï°¥ ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å (ÏûàÎã§Î©¥)..."
            EXISTING_PID=$(pgrep -f 'java -jar')
            [ -n "$EXISTING_PID" ] && kill $EXISTING_PID && sleep 2

            echo "üöÄ ÏÉàÎ°úÏö¥ Î∞±ÏóîÎìú Ïã§Ìñâ (nohup)..."
            nohup java -jar "$JAR_FILE" --server.port=8080 > $LOG_FILE 2>&1 &

            echo "‚è≥ Ïã§Ìñâ ÎåÄÍ∏∞ Ï§ë..."
            for i in {1..10}; do
              BACKEND_PID=$(pgrep -f 'java -jar')
              if [ -n "$BACKEND_PID" ]; then
                echo "‚úÖ Î∞±ÏóîÎìú Ïã§Ìñâ ÏÑ±Í≥µ (PID: $BACKEND_PID)"
                tail -n 20 $LOG_FILE
                exit 0
              fi
              sleep 1
            done

            echo "‚ùå Spring Boot Ïã§Ìñâ Ïã§Ìå®. Î°úÍ∑∏ ÌôïÏù∏:"
            [ -f "$LOG_FILE" ] && tail -n 50 $LOG_FILE || echo "‚ùå backend.log ÏóÜÏùå"
            [ -f ~/nohup.out ] && tail -n 50 ~/nohup.out || echo "‚ùå nohup.out ÏóÜÏùå"
            exit 1
