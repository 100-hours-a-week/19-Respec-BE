name: Deploy Backend to EC2

on:
  push:
    branches:
      - stage

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DB_URL,DB_USERNAME,DB_PASSWORD,JWT_SECRET,KAKAO_CLIENT_ID,KAKAO_CLIENT_SECRET,BACKEND_BASE_URL,FRONTEND_BASE_URL,AI_SERVER_URL
          script: |
            REPO_DIR=19-Respec-BE
            LOG_FILE=~/backend.log

            if [ ! -d "$REPO_DIR" ]; then
              git clone https://github.com/100-hours-a-week/19-Respec-BE.git
            fi

            cd $REPO_DIR
            git checkout stage
            git pull origin stage

            echo "📦 application.properties 생성 중..."
            mkdir -p src/main/resources
            {
              echo "spring.datasource.url=$DB_URL"
              echo "spring.datasource.username=$DB_USERNAME"
              echo "spring.datasource.password=$DB_PASSWORD"
              echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver"
              echo "spring.jpa.hibernate.ddl-auto=none"
              echo "spring.jpa.show-sql=false"
              echo "spring.jpa.properties.hibernate.format_sql=false"
              echo "server.port=8080"
              echo "spring.profiles.active=auth, ai, no-spec-initialize, no-user-initialize"
              echo "spring.jwt.secret=$JWT_SECRET"
              echo "spring.security.oauth2.client.registration.kakao.client-name=kakao"
              echo "spring.security.oauth2.client.registration.kakao.client-id=$KAKAO_CLIENT_ID"
              echo "spring.security.oauth2.client.registration.kakao.client-secret=$KAKAO_CLIENT_SECRET"
              echo "spring.security.oauth2.client.registration.kakao.redirect-uri=\${backend.base-url}/login/oauth2/code/kakao"
              echo "spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code"
              echo "spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post"
              echo "spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize"
              echo "spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token"
              echo "spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me"
              echo "spring.security.oauth2.client.provider.kakao.user-name-attribute=id"
              echo "spring.cloud.aws.s3.enabled=false"
              echo "spring.cloud.aws.stack.auto=false"
              echo "logging.level.org.springframework.security.oauth2.client=DEBUG"
              echo "logging.level.org.springframework.web.client.RestTemplate=DEBUG"
              echo "mock.login.user=false"
              echo "backend.base-url=$BACKEND_BASE_URL"
              echo "frontend.base-url=$FRONTEND_BASE_URL"
              echo "frontend.redirect-url=\${frontend.base-url}/oauth-redirect"
              echo "spring.graphql.cors.allowed-origins=\${frontend.base-url}"
              echo "ai.server.url=$AI_SERVER_URL"
              echo "ai.server.url.path=/spec/v1/post"
            } > src/main/resources/application.properties

            echo "☕ JAVA_HOME 설정 중..."
            export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))
            export PATH=$JAVA_HOME/bin:$PATH

            echo "🚀 Spring Boot 프로젝트 빌드 시작..."
            ./gradlew clean build --no-daemon --refresh-dependencies -x test || { echo "❌ 빌드 실패"; exit 1; }

            JAR_FILE=$(find build/libs -name "*.jar" | head -n 1)

            echo "🔁 백엔드 서버 재시작..."
            EXISTING_PID=$(pgrep -f 'java -jar')
            if [ -n "$EXISTING_PID" ]; then
              kill $EXISTING_PID
              sleep 2
            fi

            echo "🚀 새 백엔드 실행 중..."
            nohup java -jar "$JAR_FILE" --server.port=8080 > $LOG_FILE 2>&1 &
            echo "✅ 실행 완료 (로그: $LOG_FILE)"
